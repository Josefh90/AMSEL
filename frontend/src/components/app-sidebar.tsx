"use client"

import * as React from "react"
import { useEffect, useState } from "react"
import { ChevronRight, File, Folder } from "lucide-react"
import {
  Sidebar,
  SidebarContent,
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarGroup,
  SidebarGroupLabel,
  SidebarGroupContent,
  SidebarRail,
  SidebarMenuSub,
} from "../components/ui/sidebar"
import { Collapsible, CollapsibleTrigger, CollapsibleContent } from "../components/ui/collapsible"
import  { TestFunction } from "../../wailsjs/go/app/App" // auto-generated by Wails

interface FileNode {
  name: string
  isDir: boolean
  children?: FileNode[]
}

export function AppSidebar({ ...props }: React.ComponentProps<typeof Sidebar>) {
  const [fileTree, setFileTree] = useState<FileNode | null>(null)

  useEffect(() => {
    const loadTree = async () => {
      try {
        const result = await TestFunction("./seclists") // Adjust the path as needed
        setFileTree(result)
      } catch (error) {
        console.error("Error loading file tree:", error)
      }
    }
    loadTree()
  }, [])

  return (
    <Sidebar {...props}>
      <SidebarContent>
        <SidebarGroup>
          <SidebarGroupLabel>Files</SidebarGroupLabel>
          <SidebarGroupContent>
            <SidebarMenu>
              {fileTree ? <RenderTree node={fileTree} /> : <div>Loading...</div>}
            </SidebarMenu>
          </SidebarGroupContent>
        </SidebarGroup>
      </SidebarContent>
      <SidebarRail />
    </Sidebar>
  )
}

function RenderTree({ node }: { node: FileNode }) {
  if (!node.isDir) {
    return (
      <SidebarMenuButton onClick={() => alert(`File: ${node.name}`)}>
        <File />
        {node.name}
      </SidebarMenuButton>
    )
  }

  return (
    <SidebarMenuItem>
      <Collapsible
        className="group/collapsible [&[data-state=open]>button>svg:first-child]:rotate-90"
        defaultOpen={node.name === "components" || node.name === "ui"}
      >
        <CollapsibleTrigger asChild>
          <SidebarMenuButton>
            <ChevronRight className="transition-transform" />
            <Folder />
            {node.name}
          </SidebarMenuButton>
        </CollapsibleTrigger>
        <CollapsibleContent>
          <SidebarMenuSub>
            {node.children?.map((child, index) => (
              <RenderTree key={index} node={child} />
            ))}
          </SidebarMenuSub>
        </CollapsibleContent>
      </Collapsible>
    </SidebarMenuItem>
  )
}
