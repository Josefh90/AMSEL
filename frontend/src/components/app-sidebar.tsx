"use client"

import * as React from "react"
import { useEffect, useState, forwardRef } from "react"
import { ChevronRight, File, Folder, Frame, PieChart, Map } from "lucide-react"
import {
  Sidebar,
  SidebarContent,
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarGroup,
  SidebarGroupLabel,
  SidebarGroupContent,
  SidebarRail,
  SidebarMenuSub,
  SidebarHeader
} from "../components/ui/sidebar"
import { GalleryVerticalEnd } from "lucide-react"
import { Collapsible, CollapsibleTrigger, CollapsibleContent } from "../components/ui/collapsible"
import { NavProjects } from "./nav-projects"
import  { TestFunction } from "../../wailsjs/go/app/App" // auto-generated by Wails
import { NavMain } from "./nav-main"

import {
  IconChartBar,
  IconDashboard,
  IconFolder,
  IconListDetails,
  IconUsers,
} from "@tabler/icons-react"

interface FileNode {
  name: string
  isDir: boolean
  children?: FileNode[]
}

// This is sample data.
const data = {  

  navMain: [
    {
      title: "Dashboard",
      url: "#",
      icon: IconDashboard,
    },
    {
      title: "Lifecycle",
      url: "#",
      icon: IconListDetails,
    },
    {
      title: "Analytics",
      url: "#",
      icon: IconChartBar,
    },
    {
      title: "Projects",
      url: "#",
      icon: IconFolder,
    },
    {
      title: "Team",
      url: "#",
      icon: IconUsers,
    },
  ],
  projects: [
    {
      name: "Vulnerable.de",
      url: "#",
      icon: Frame,
    },
    {
      name: "DontHackMe Corp",
      url: "#",
      icon: PieChart,
    },
    {
      name: "Sploited.dev",
      url: "#",
      icon: Map,
    },
  ],
}

export const AppSidebar = forwardRef<HTMLDivElement, React.ComponentProps<typeof Sidebar>>(
  function AppSidebar({ ...props }, ref) {
    const [fileTree, setFileTree] = useState<FileNode | null>(null);

    useEffect(() => {
      const loadTree = async () => {
        try {
          const result = await TestFunction("./wordlists");
          setFileTree(result);
        } catch (error) {
          console.error("Error loading file tree:", error);
        }
      };
      loadTree();
    }, []);

    return (
      <Sidebar ref={ref} {...props}>
        <SidebarHeader>
          <SidebarMenu>
            <SidebarMenuItem>
              <SidebarMenuButton size="lg" asChild>
                <a href="#">
                  <div className=" text-amselblue text-sidebar-primary-foreground flex aspect-square size-8 items-center justify-center rounded-lg">
                    <GalleryVerticalEnd className="size-4" />
                  </div>
                  <div className="flex flex-col gap-0.5 leading-none">
                    <span className="font-semibold">AMSEL</span>
                    <span className="">v0.0.0-alpha</span>
                  </div>
                </a>
              </SidebarMenuButton>
            </SidebarMenuItem>
          </SidebarMenu>
        </SidebarHeader>

        <SidebarContent>
          <NavMain items={data.navMain} />
          <NavProjects projects={data.projects} />
          <SidebarGroup>
            <SidebarGroupLabel>Files</SidebarGroupLabel>
            <SidebarGroupContent>
              <SidebarMenu>
                {fileTree ? <RenderTree node={fileTree} /> : <div>Loading...</div>}
              </SidebarMenu>
            </SidebarGroupContent>
          </SidebarGroup>
        </SidebarContent>
        <SidebarRail />
      </Sidebar>
    );
  }
);

function RenderTree({ node }: { node: FileNode }) {
  if (!node.isDir) {
    return (
      <SidebarMenuButton onClick={() => alert(`File: ${node.name}`)}>
        <File />
         <span className="truncate">{node.name}</span>
      </SidebarMenuButton>
    )
  }

  return (
    
    <SidebarMenuItem>
  
      <Collapsible
        className="group/collapsible [&[data-state=open]>button>svg:first-child]:rotate-90"
        defaultOpen={node.name === "components" || node.name === "ui"}
      >
        <CollapsibleTrigger asChild>
          <SidebarMenuButton>
            <ChevronRight className="transition-transform" />
            <Folder />
            <span className="truncate">{node.name}</span>
          </SidebarMenuButton>
        </CollapsibleTrigger>
        <CollapsibleContent>
          <SidebarMenuSub >
            {node.children?.map((child, index) => (
              <RenderTree key={index} node={child} />
            ))}
          </SidebarMenuSub>
        </CollapsibleContent>
      </Collapsible>
    </SidebarMenuItem>
  )
}
